/**
 * Designed and developed by Aidan Follestad (@afollestad)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.afollestad.ulfberht.utilities

import com.afollestad.ulfberht.Factory
import com.afollestad.ulfberht.Provider
import com.afollestad.ulfberht.api.ComponentImpl
import com.afollestad.ulfberht.utilities.Names.LIBRARY_PACKAGE
import com.squareup.kotlinpoet.ANY
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.STAR
import com.squareup.kotlinpoet.TypeVariableName
import com.squareup.kotlinpoet.asTypeName
import kotlin.reflect.KClass

internal object Names {
  const val LIBRARY_PACKAGE = "com.afollestad.ulfberht"
  const val CLASS_HEADER = "Generated by [Ulfberht](https://github.com/afollestad/ulfberht)"
  const val COMPONENT_NAME_SUFFIX = "_Component"
  const val FACTORY_NAME_SUFFIX = "_Factory"
}

internal object Types {
  val TYPE_VARIABLE_T = TypeVariableName("T", ANY)

  private val KCLASS = KClass::class.asTypeName()
  val KCLASS_OF_ANY = KCLASS.parameterizedBy(STAR)
  val KCLASS_OF_T = KCLASS.parameterizedBy(TYPE_VARIABLE_T)

  val FACTORY = Factory::class.asTypeName()
  val PROVIDER = Provider::class.asTypeName()
  val PROVIDER_CREATOR = MemberName(PROVIDER.packageName, "provider")
  val PROVIDER_SINGLETON_CREATOR = MemberName(PROVIDER.packageName, "singletonProvider")
  val COMPONENT_IMPL = ComponentImpl::class.asTypeName()

  // Lifecycle + Scopes
  private const val LIFECYCLE_PKG = "androidx.lifecycle"
  val LIFECYCLE_OWNER = ClassName(LIFECYCLE_PKG, "LifecycleOwner")
  val LIFECYCLE_OBSERVER = ClassName(LIFECYCLE_PKG, "LifecycleObserver")
  val GET_SCOPE_METHOD = ClassName(LIBRARY_PACKAGE, "getScope")
  val ON_LIFECYCLE_EVENT = ClassName(LIFECYCLE_PKG, "OnLifecycleEvent")
  val LIFECYCLE_EVENT_ON_DESTROY = ClassName("$LIFECYCLE_PKG.Lifecycle.Event", "ON_DESTROY")

  // View Models
  val VIEW_MODEL = ClassName(LIFECYCLE_PKG, "ViewModel")
  val VIEW_MODEL_PROVIDERS = ClassName(LIFECYCLE_PKG, "ViewModelProviders")
  val VIEW_MODEL_FACTORY = ClassName("$LIFECYCLE_PKG.ViewModelProvider", "Factory")

  private const val ANDROIDX_FRAGMENT_PKG = "androidx.fragment.app"
  val FRAGMENT = ClassName(ANDROIDX_FRAGMENT_PKG, "Fragment")
  val COMPONENT_ACTIVITY = ClassName(ANDROIDX_FRAGMENT_PKG, "ComponentActivity")
}
